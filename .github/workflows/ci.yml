name: Synndicate AI CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: "3.11"
  SYN_SEED: 1337
  SYN_ENVIRONMENT: ci

jobs:
  # Code Quality & Linting
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install ruff black mypy

      - name: Run Ruff linting
        run: ruff check src/ --output-format=github

      - name: Run Black formatting check
        run: black --check src/

      - name: Run MyPy type checking
        run: mypy src/ --ignore-missing-imports

  # Unit & Integration Tests
  test:
    name: Tests & Coverage
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install pytest pytest-cov pytest-asyncio

      - name: Run unit tests
        run: |
          pytest tests/ -v --cov=synndicate --cov-report=xml --cov-report=html
        continue-on-error: false

      - name: Run integration tests
        run: |
          python test_trace_integration.py
          python test_tinyllama_complete.py
        continue-on-error: false

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Archive test artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-artifacts-${{ matrix.python-version }}
          path: |
            htmlcov/
            coverage.xml
            artifacts/
          retention-days: 7

  # Security & Audit
  audit:
    name: Security & Audit
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install safety bandit pip-audit

      - name: Run safety check
        run: safety check --json --output safety-report.json
        continue-on-error: true

      - name: Run bandit security linting
        run: bandit -r src/ -f json -o bandit-report.json
        continue-on-error: true

      - name: Run pip-audit
        run: pip-audit --format=json --output=pip-audit-report.json
        continue-on-error: true

      - name: Generate audit bundle
        run: make audit-bundle
        continue-on-error: true

      - name: Upload audit artifacts
        uses: actions/upload-artifact@v3
        with:
          name: audit-bundle
          path: |
            synndicate_audit/
            safety-report.json
            bandit-report.json
            pip-audit-report.json
          retention-days: 30

  # Docker Build & Push
  docker:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    needs: [lint, test, audit]
    if: github.event_name == 'push' || github.event_name == 'release'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: github.event_name == 'release'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: synndicate/ai
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name == 'release' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          docker run --rm -d --name synndicate-test -p 8080:8000 synndicate/ai:latest
          sleep 30
          curl -f http://localhost:8080/health || exit 1
          docker stop synndicate-test

  # Performance Benchmarks
  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install locust

      - name: Run performance benchmarks
        run: |
          # Start API server in background
          python -m uvicorn synndicate.api.server:app --host 0.0.0.0 --port 8000 &
          sleep 30
          
          # Run basic load test
          locust -f .github/workflows/locustfile.py --host=http://localhost:8000 \
            --users=10 --spawn-rate=2 --run-time=60s --headless \
            --html=performance-report.html

      - name: Upload performance report
        uses: actions/upload-artifact@v3
        with:
          name: performance-report
          path: performance-report.html
          retention-days: 30

  # Deployment (Production)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker, benchmark]
    if: github.event_name == 'release'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "ðŸš€ Deploying Synndicate AI v${{ github.event.release.tag_name }} to production"
          # Add your deployment logic here (k8s, docker-compose, etc.)
          
      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          text: "Synndicate AI deployment ${{ job.status }}: ${{ github.event.release.tag_name }}"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
