Synndicate AI - Project Structure Tree
Copyright (c) 2025 Himo Kai. All Rights Reserved.

Generated: 2025-01-29 (Updated after comprehensive cleanup)
Purpose: Audit trail and project structure documentation

CLEAN Project Structure (21 directories, 70 files):

.
├── config/                     # Configuration files (36 bytes)
│   └── deployment/             # Deployment configurations (56 bytes)
│       ├── docker-compose.yml  # Main docker compose (607 bytes)
│       └── nginx.conf          # Nginx configuration (596 bytes)
├── data/                       # Persistent data and caches (28 bytes)
├── docs/                       # Documentation (86 bytes)
│   ├── ARCHITECTURE.md         # System architecture guide (11K)
│   ├── DEVELOPMENT.md          # Development workflow guide (11K)
│   └── MODEL_SETUP.md          # Model configuration guide (2.1K)
├── examples/                   # Demo scripts and examples (52 bytes)
│   └── demo_synndicate.py      # Main demo script (11K)
├── scripts/                    # CLI tools and utilities (114 bytes)
│   ├── rag_smoke.py           # RAG system smoke tests (1.5K)
│   ├── vector_cli.py          # Vector store CLI tool (8.3K)
│   └── vectorstore_server.py  # Vector store HTTP server (6.2K)
├── src/                        # Source code (20 bytes)
│   └── synndicate/             # Main package (154 bytes)
│       ├── agents/             # Multi-agent system (198 bytes)
│       │   ├── base.py         # Base agent protocol (14K)
│       │   ├── coder.py        # Code generation agent (20K)
│       │   ├── critic.py       # Quality assurance agent (14K)
│       │   ├── dynamic_coder.py # Dynamic code agent (8.6K)
│       │   ├── dynamic_critic.py # Dynamic critic agent (9.1K)
│       │   ├── factory.py      # Agent factory (3.5K)
│       │   ├── __init__.py     # Package initialization (620 bytes)
│       │   └── planner.py      # Planning agent (8.5K)
│       ├── api/                # FastAPI server (62 bytes)
│       │   ├── __init__.py     # Package initialization (108 bytes)
│       │   └── server.py       # Main API server (10K)
│       ├── config/             # Configuration management (90 bytes)
│       │   ├── container.py    # Dependency injection (4.6K)
│       │   ├── __init__.py     # Package initialization (237 bytes)
│       │   └── settings.py     # Application settings (7.3K)
│       ├── core/               # Orchestration and workflows (266 bytes)
│       │   ├── audit.py        # Audit trail generation (5.1K)
│       │   ├── determinism.py  # Deterministic behavior (2.4K)
│       │   ├── dynamic_orchestrator.py # Dynamic orchestration (21K)
│       │   ├── enhanced_orchestrator.py # Enhanced orchestration (19K)
│       │   ├── __init__.py     # Package initialization (602 bytes)
│       │   ├── orchestrator.py # Main orchestrator (23K)
│       │   ├── pipeline.py     # Pipeline management (17K)
│       │   └── state_machine.py # State machine (11K)
│       ├── __init__.py         # Main package init (3.9K)
│       ├── main.py             # Application entry point (1.6K)
│       ├── observability/      # Logging, tracing, metrics (146 bytes)
│       │   ├── __init__.py     # Package initialization (3.1K)
│       │   ├── logging.py      # Structured logging (4.6K)
│       │   ├── metrics.py      # Performance metrics (12K)
│       │   ├── monitoring.py   # System monitoring (12K)
│       │   ├── probe.py        # Performance probes (4.6K)
│       │   └── tracing.py      # Request tracing (7.6K)
│       ├── rag/                # Retrieval-augmented generation (130 bytes)
│       │   ├── chunking.py     # Document chunking (19K)
│       │   ├── context.py      # Context management (22K)
│       │   ├── indexer.py      # Document indexing (13K)
│       │   ├── __init__.py     # Package initialization (807 bytes)
│       │   └── retriever.py    # Document retrieval (25K)
│       └── storage/            # Artifact and data storage (68 bytes)
│           ├── artifacts.py    # Artifact management (8.0K)
│           └── __init__.py     # Package initialization (597 bytes)
├── synndicate_audit/           # Audit trail and compliance (74 bytes)
│   ├── configs/                # Audit configurations (16 bytes)
│   ├── endpoints/              # API endpoint samples (62 bytes)
│   │   ├── health.json         # Health endpoint sample (260 bytes)
│   │   └── sample_response.json # Sample API response (261 bytes)
│   └── tree.txt                # This file - project structure (6.3K)
├── tests/                      # Test suites (610 bytes)
│   ├── __init__.py             # Package initialization (43 bytes)
│   ├── test_dynamic_integration.py # Dynamic integration tests (21K)
│   ├── test_dynamic_orchestration.py # Dynamic orchestration tests (18K)
│   ├── test_full_integration.py # Full integration tests (11K)
│   ├── test_model_integration_observability.py # Model observability tests (12K)
│   ├── test_models.py          # Model tests (6.7K)
│   ├── test_observability_refactor.py # Observability refactor tests (10K)
│   ├── test_rag_basic.py       # Basic RAG tests (11K)
│   ├── test_rag.py             # RAG system tests (7.8K)
│   ├── test_rag_simple.py      # Simple RAG tests (7.5K)
│   ├── test_tinyllama_complete.py # TinyLlama complete tests (14K)
│   ├── test_tinyllama_ready.py # TinyLlama readiness tests (1.3K)
│   └── test_trace_integration.py # Trace integration tests (8.5K)
├── validation/                 # Validation scripts (116 bytes)
│   ├── run_dynamic_validation.py # Dynamic validation script (1.7K)
│   └── validate_dynamic_orchestration.py # Dynamic orchestration validation (9.2K)
├── docker-compose.vectorstore.yml # Vector store deployment (2.1K)
├── Dockerfile                  # Main container (2.5K)
├── Dockerfile.vectorstore      # Vector store container (2.3K)
├── LICENSE                     # All Rights Reserved license (1.0K)
├── Makefile                    # Build automation (2.5K)
├── pyproject.toml              # Project metadata (2.7K)
└── README.md                   # Main documentation (13K)

Cleanup Status: COMPLETE ✅
- All stray files removed
- All temporary configs cleaned up
- Development artifacts organized under build/ (ignored by Git)
- Configuration files organized under config/
- Demo scripts organized under examples/
- All tests consolidated under tests/
- Validation scripts organized under validation/

Audit Status: Complete and Clean
License: All Rights Reserved - Proprietary
Development Platform: Arch Linux (primary)
CI/CD Platform: Ubuntu (GitHub Actions)
Total Size: ~500KB source code, 21 directories, 70 files
Project Structure: Professional and Production-Ready